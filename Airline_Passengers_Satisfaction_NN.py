# -*- coding: utf-8 -*-
"""Week_6_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RC1OPAU_DRF3hTVeKN8OZK6Vsm5Ovvwk
"""

import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import kagglehub

# Download latest version
path = kagglehub.dataset_download("teejmahal20/airline-passenger-satisfaction")

print("Path to dataset files:", path)

df = pd.read_csv(r"/kaggle/input/airline-passenger-satisfaction/train.csv")

df.head()

df.info()

df = df.dropna(subset=['Arrival Delay in Minutes'])

df.isna().sum()

df.drop(['Unnamed: 0', 'id'], axis=1, inplace=True)

df.head()

df.info()

df.replace({'neutral or dissatisfied': 0, 'satisfied': 1}, inplace=True)
df.replace({'Male': 0, 'Female': 1}, inplace=True)
df.replace({'Business travel': 0, 'Personal Travel': 1, 'Vacation': 2}, inplace=True)
df.replace({'Business': 0, 'Eco Plus': 1, 'Eco': 2}, inplace=True)

df.info()

df['Customer Type'].unique()

df.replace({'Loyal Customer': 0, 'disloyal Customer': 1}, inplace=True)

df.info()

df.head()

X = df.drop('satisfaction', axis=1)
y = df['satisfaction']

X_train_full, X_test, y_train_full, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train_full, y_train_full, test_size=0.3, random_state=42)

tf.random.set_seed(42)
dense_model = Sequential([
    Dense(128, activation='linear', input_shape=(X_train.shape[1],)),
    Dense(64, activation='leaky_relu'),
    Dense(32, activation='leaky_relu'),
    Dense(1, activation='sigmoid')
])
dense_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

dense_callback = EarlyStopping(monitor='val_loss', patience=10)

history = dense_model.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_val, y_val), callbacks=[dense_callback])

dense_model_2 = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])
dense_model_2.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

dense_model_2.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_val, y_val), callbacks=[dense_callback])

loss, accuracy = dense_model_2.evaluate(X_test, y_test)
print(f"Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}")

# Commented out IPython magic to ensure Python compatibility.
import sys
if "google.colab" in sys.modules:  # extra code
#     %pip install -q -U tensorboard-plugin-profile

from pathlib import Path
from time import strftime

def get_run_logdir(root_logdir="my_logs"):
    return Path(root_logdir) / strftime("run_%Y_%m_%d_%H_%M_%S")

run_logdir = get_run_logdir()

# Model Builder
def build_model_arch1(input_dim, optimizer, loss, lr=1e-3, dropout=0,actv_input,actv_hidden,actv_output):

    if isinstance(optimizer, str):
        opt_dict = {
            'adam': keras.optimizers.Adam(learning_rate=lr),
            'rmsprop': keras.optimizers.RMSprop(learning_rate=lr),
            'sgd': keras.optimizers.SGD(learning_rate=lr, momentum=0.9, nesterov=True)
        }
        opt = opt_dict.get(optimizer.lower(), keras.optimizers.Adam(learning_rate=lr))
    else:
        opt = optimizer

    d1, d2 = (dropout, dropout) if not isinstance(dropout, (list, tuple)) else dropout

    model = keras.Sequential([
        layers.Dense(128, activation=actv_input, input_shape=(input_dim,)),
        layers.BatchNormalization(),
        layers.Dropout(d1),

        layers.Dense(64, activation=actv_hidden),
        layers.BatchNormalization(),
        layers.Dropout(d2),

        layers.Dense(1, activation=actv_outpu)
    ])

    model.compile(optimizer=opt, loss=loss, metrics=['accuracy'])
    return model

tf.keras.backend.clear_session()

model_1 = build_model_arch1(
    input_dim=X_train.shape[1],
    optimizer='rmsprop',
    loss='binary_crossentropy',
    lr=1e-3,
    dropout=0.1,
    actv_input='leaky_relu',
    actv_hidden='leaky_relu',
    actv_output='sigmoid'
)

model_2 = build_model_arch1(
    input_dim=X_train.shape[1],
    optimizer='adam',
    loss='binary_crossentropy',
    lr=1e-3,
    dropout=0.2,
    actv_input='relu',
    actv_hidden='relu',
    actv_output='sigmoid'
)

model_3 = build_model_arch1(
    input_dim=X_train.shape[1],
    optimizer='adam',
    loss='binary_crossentropy',
    lr=1e-3,
    dropout=0.3,
    actv_input='leaky_relu',
    actv_hidden='relu',
    actv_output='sigmoid'
)

tensorboard_callback = tf.keras.callbacks.TensorBoard(run_logdir / 'model_1')
history_1 = model_1.fit(X_train, y_train, epochs=50, batch_size=16, validation_data=(X_val, y_val), callbacks=[tensorboard_callback])

tensorboard_callback_2 = tf.keras.callbacks.TensorBoard(run_logdir / 'model_2')
history_2 = model_2.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_val, y_val), callbacks=[tensorboard_callback_2])

tensorboard_callback_3 = tf.keras.callbacks.TensorBoard(run_logdir / 'model_3')
history_3 = model_3.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_val, y_val), callbacks=[tensorboard_callback_3])

loss_1, accuracy_1 = model_1.evaluate(X_test, y_test)
loss_2, accuracy_2 = model_2.evaluate(X_test, y_test)
loss_3, accuracy_3 = model_3.evaluate(X_test, y_test)

print(f"Model 1 - Test Loss: {loss_1:.4f}, Test Accuracy: {accuracy_1:.4f}")
print(f"Model 2 - Test Loss: {loss_2:.4f}, Test Accuracy: {accuracy_2:.4f}")
print(f"Model 3 - Test Loss: {loss_3:.4f}, Test Accuracy: {accuracy_3:.4f}")

import matplotlib.pyplot as plt

# Plot training and validation accuracy for model_1
plt.figure(figsize=(10, 6))
plt.plot(history_1.history['accuracy'], label='model_1 train accuracy')
plt.plot(history_1.history['val_accuracy'], label='model_1 val accuracy')
plt.title('Model 1 Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Plot training and validation accuracy for model_2
plt.figure(figsize=(10, 6))
plt.plot(history_2.history['accuracy'], label='model_2 train accuracy')
plt.plot(history_2.history['val_accuracy'], label='model_2 val accuracy')
plt.title('Model 2 Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Plot training and validation accuracy for model_3
plt.figure(figsize=(10, 6))
plt.plot(history_3.history['accuracy'], label='model_3 train accuracy')
plt.plot(history_3.history['val_accuracy'], label='model_3 val accuracy')
plt.title('Model 3 Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir=./my_logs

